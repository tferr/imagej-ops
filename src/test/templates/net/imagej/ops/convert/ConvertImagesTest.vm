/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2016 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.convert;

import static org.junit.Assert.assertEquals;

import java.util.Random;

import net.imagej.ops.AbstractOpTest;
import net.imglib2.Cursor;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgs;
import net.imglib2.img.cell.CellImgFactory;
import net.imglib2.type.numeric.ComplexType;

#set ($imports = [])
#foreach ($op in $ops)
#set($result = $imports.add($op.type))
#end
#*
NB: Sort the list. We access the Collections class via reflection, since
Velocity does not have a built-in syntax for importing Java classes.
Credit to Martin Gamulin for the idea: http://stackoverflow.com/a/7672699
*#
#set($Collections = $ops.getClass().forName("java.util.Collections"))
#set($result = $Collections.sort($imports))
#foreach ($import in $imports)
import $import;
#end

import org.junit.BeforeClass;
import org.junit.Test;

/**
 * Tests the {@link ConvertImages} ops.
 *
 * @author Curtis Rueden
 */
public class ConvertImagesTest extends AbstractOpTest {

	private static final long[] DIMS = { 4, 3 };

	private static final double[] VALUES = { //
		12.2, 0.0, 122.5, 9.123, //
		-6.4, 0.0, 56.1, 34.7, //
		108.0, 1.4, 0.7, 0.0 //
	};

	private static Img<DoubleType> cellImg;

	@BeforeClass
	public static void setup() {
		cellImg = new CellImgFactory<DoubleType>().create(new long[] { 10, 42 }, new DoubleType());
		final int seed = 12;
		final Random rand = new Random(seed);
		final Cursor<DoubleType> c = cellImg.cursor();
		while (c.hasNext())
			c.next().set(rand.nextDouble());
	}

#foreach ($op in $ops)
#set ($opType = $op.name)
#set ($dot = $op.type.lastIndexOf(".") + 1)
#set ($imglibType = $op.type.substring($dot))
#set ($methodName = $opType.toLowerCase())

	@Test
	public <C extends ComplexType<C>> void test$opType() {
		final Img<DoubleType> in = ArrayImgs.doubles(VALUES, DIMS);
		@SuppressWarnings("unchecked")
		final Img<$imglibType> out = (Img<$imglibType>) ops.run(ConvertImages.${op.name}.class,
			in);

		final Cursor<DoubleType> ci = in.cursor();
		final Cursor<$imglibType> co = out.cursor();

		while (ci.hasNext()) {
			final DoubleType inEl = ci.next();
			final $imglibType actual = co.next();
			final $imglibType expected = ops.convert().$methodName(inEl);
			assertEquals("Value mismatch: " + inEl, expected, actual);
		}
	}
#end

## Only need one test with CellImg since all conversions call the same Map Op
	@Test
	public <C extends ComplexType<C>> void testCellImgUint32() {
		@SuppressWarnings("unchecked")
		final Img<UnsignedIntType> out = (Img<UnsignedIntType>) ops.run(ConvertImages.Uint32.class,
			cellImg);

		final Cursor<DoubleType> ci = cellImg.cursor();
		final Cursor<UnsignedIntType> co = out.cursor();

		while (ci.hasNext()) {
			final DoubleType inEl = ci.next();
			final UnsignedIntType actual = co.next();
			final UnsignedIntType expected = ops.convert().uint32(inEl);
			assertEquals("Value mismatch: " + inEl, expected, actual);
		}
	}

}
