/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2016 Board of Regents of the University of
 * Wisconsin-Madison, University of Konstanz and Brian Northan.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.map;

import static org.junit.Assert.assertEquals;

import net.imagej.ops.AbstractOpTest;
import net.imagej.ops.Op;
import net.imagej.ops.Ops;
import net.imagej.ops.map.MapBinaryComputers.IIAndIIToII;
import net.imagej.ops.map.MapBinaryComputers.IIAndIIToIIParallel;
import net.imagej.ops.map.MapBinaryComputers.IIAndIIToRAI;
import net.imagej.ops.map.MapBinaryComputers.IIAndIIToRAIParallel;
import net.imagej.ops.map.MapBinaryComputers.IIAndRAIToII;
import net.imagej.ops.map.MapBinaryComputers.IIAndRAIToIIParallel;
import net.imagej.ops.map.MapBinaryComputers.IIAndRAIToRAI;
import net.imagej.ops.map.MapBinaryComputers.IIAndRAIToRAIParallel;
import net.imagej.ops.map.MapBinaryComputers.RAIAndIIToII;
import net.imagej.ops.map.MapBinaryComputers.RAIAndIIToIIParallel;
import net.imagej.ops.map.MapBinaryComputers.RAIAndIIToRAI;
import net.imagej.ops.map.MapBinaryComputers.RAIAndIIToRAIParallel;
import net.imagej.ops.map.MapBinaryComputers.RAIAndRAIToII;
import net.imagej.ops.map.MapBinaryComputers.RAIAndRAIToIIParallel;
import net.imagej.ops.special.computer.Computers;
import net.imglib2.Cursor;
import net.imglib2.img.Img;
import net.imglib2.type.numeric.integer.ByteType;

import org.junit.Before;
import org.junit.Test;

/**
 * Tests for {@link MapBinaryComputers}.
 * 
 * @author Leon Yang
 */
public class MapBinaryComputersTest extends AbstractOpTest {

	private Img<ByteType> in1;
	private Img<ByteType> in2;
	private Img<ByteType> out;
	private Img<ByteType> cellIn1;
	private Img<ByteType> cellIn2;
	private Img<ByteType> cellOut;
	private Op add;

	@Before
	public void initImg() {
		in1 = generateByteArrayTestImg(true, 10, 10);
		in2 = generateByteArrayTestImg(false, 10, 10);
		for (ByteType px : in2)
			px.set((byte) 1);
		out = generateByteArrayTestImg(false, 10, 10);
		cellIn1 = generateByteTestCellImg(true, 20, 10);
		cellIn2 = generateByteTestCellImg(true, 20, 10);
		cellOut = generateByteTestCellImg(false, 20, 10);
		add = Computers.binary(ops, Ops.Math.Add.class, ByteType.class,
			ByteType.class, ByteType.class);
	}

## there are 7 combinations of binary maps: "all RAIs" is not included
#set ($count = 7)
#foreach ($in1Type in $types)
#foreach ($in2Type in $types)
#foreach ($outType in $types)
#if ($count > 0)
#foreach ($parallel in ["", "Parallel"])
#set ($className = "${in1Type}And${in2Type}To${outType}${parallel}")
	@Test
	public void test${className}() {
		ops.run(${className}.class, out, in1, in2, add);
		assertImgAddEquals(in1, in2, out);
	}

#end
#end
#set ($count = $count - 1)
#end
#end
#end
#set ($count = 7)
#foreach ($in1Type in $types)
#foreach ($in2Type in $types)
#foreach ($outType in $types)
#if ($count > 0)
#set ($className = "${in1Type}And${in2Type}To${outType}Parallel")
	@Test
	public void test${className}CellImg() {
		ops.run(${className}.class, cellOut, cellIn1, cellIn2, add);
		assertImgAddEquals(cellIn1, cellIn2, cellOut);
	}

#end
#set ($count = $count - 1)
#end
#end
#end
	// -- helper methods --

	private static void assertImgAddEquals(Img<ByteType> in1, Img<ByteType> in2,
		Img<ByteType> out)
	{
		final Cursor<ByteType> in1Cursor = in1.cursor();
		final Cursor<ByteType> in2Cursor = in2.cursor();
		final Cursor<ByteType> outCursor = out.cursor();

		while (in1Cursor.hasNext()) {
			assertEquals((byte) (in1Cursor.next().get() + in2Cursor.next().get()),
				outCursor.next().get());
		}
	}

}
